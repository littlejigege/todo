{"version":3,"sources":["todo/actions.js","todo/store.js","todo/reducers.js","logo.svg","todo/Input.js","todo/toolbar.js","todo/todoList.js","App.js","serviceWorker.js","index.js"],"names":["TODO","SWITCH_TAB","CHANGE_TEXT","ADD","TOGGLE","DELETE","JUMP","store","createStore","initTodoApp","eval","localStorage","state","subscribe","console","log","getState","JSON","stringify","combineReducers","head","history","newNow","action","length","arg","todos","apply","input","tabs","Object","assign","type","startsWith","result","slice","shift","unshift","tab","text","done","id","Date","copiedState","index","findIndex","item","targetTodo","splice","module","exports","InputBar","onTextChange","onKeyDown","className","value","placeholder","onChange","e","target","keyCode","connect","dispatch","TABS","ToolBar","activeItemCount","onClick","map","tabName","key","reduce","currentCount","i","TodoList","onToggle","onRemove","filter","toggle","remove","TodoItem","draggable","App","Input","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","onkeydown","metaKey","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20b382e1.chunk.js","sourcesContent":["export const TODO = \"TODO.\";\nexport const SWITCH_TAB = \"SWITCH_TAB\";\nexport const CHANGE_TEXT = \"CHANGE_TEXT\";\nexport const ADD = TODO + \"ADD\";\nexport const TOGGLE = TODO + \"TOGGLE\";\nexport const DELETE = TODO + \"DELETE\";\nexport const JUMP = \"JUMP\";\n","import { createStore } from \"redux\";\nimport initTodoApp from \"./reducers\";\nimport { debounce } from \"./utils\";\n\nconst store = createStore(initTodoApp, eval(`(${localStorage.state})`));\nstore.subscribe(() => {\n  console.log(store.getState());\n  localStorage.state = JSON.stringify(store.getState());\n});\nexport default store;\n","import { combineReducers } from \"redux\";\nimport store from \"./store\";\nimport {\n  SWITCH_TAB,\n  CHANGE_TEXT,\n  ADD,\n  TOGGLE,\n  DELETE,\n  JUMP,\n  TODO,\n} from \"./actions\";\n\nconst initTodoApp = combineReducers({\n  head,\n  history,\n});\n\nexport default initTodoApp;\n\nfunction head(state = 0, action) {\n//   if (action.type === JUMP) {\n//     return action.index;\n//   }\n  return state;\n}\n\nfunction tabs(state = 0, action) {\n  if (action.type === SWITCH_TAB) {\n    return action.tab;\n  }\n  return state;\n}\n\nfunction input(state = \"\", action) {\n  if (action.type === CHANGE_TEXT) {\n    return action.input;\n  }\n  return state;\n}\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        {\n          text: action.text,\n          done: false,\n          id: +new Date(),\n        },\n      ];\n    case TOGGLE: {\n      let copiedState = state.slice();\n      const index = copiedState.findIndex((item) => {\n        return item.id === action.id;\n      });\n      let targetTodo = copiedState.splice(index, 1)[0];\n      targetTodo = Object.assign({}, targetTodo);\n      targetTodo.done = !targetTodo.done;\n      copiedState.splice(index, 0, targetTodo);\n      return copiedState;\n    }\n    case DELETE: {\n      let copiedState = state.slice();\n      const index = copiedState.findIndex((item) => {\n        return item.id === action.id;\n      });\n      copiedState.splice(index, 1);\n      return copiedState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction history(state = [], action) {\n  let newNow;\n  if (state.length === 0) {\n    newNow = {};\n    let arg = [];\n    arg[1] = action;\n    newNow.todos = todos.apply(null, arg);\n    newNow.input = input.apply(null, arg);\n    newNow.tabs = tabs.apply(null, arg);\n    newNow.action = \"INIT\";\n  } else {\n    newNow = Object.assign({}, state[0]);\n    newNow.action = action.type;\n    if (action.type.startsWith(TODO)) {\n      newNow.todos = todos(newNow.todos, action);\n    } else if (action.type === JUMP) {\n      const result = state.slice();\n      result.shift();\n      return result;\n    } else {\n      switch (action.type) {\n        case CHANGE_TEXT:\n          newNow.input = input(newNow.input, action);\n          break;\n        case SWITCH_TAB:\n          newNow.tabs = tabs(newNow.tabs, action);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  const result = state.slice();\n  result.unshift(newNow);\n  return result;\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { CHANGE_TEXT, ADD } from \"./actions\";\nimport { connect } from \"react-redux\";\nimport { debounce } from \"./utils\";\n\nlet InputBar = ({ input, onTextChange, onKeyDown }) => (\n  <input\n    className=\"todo-input\"\n    value={input}\n    type=\"text\"\n    placeholder=\"What needs to be done?\"\n    onChange={(e) => {\n      const text = e.target.value;\n      onTextChange(text);\n    }}\n    onKeyDown={(e) => {\n      const text = e.target.value;\n      if (e.keyCode === 13 && text && text !== \"\") {\n        onKeyDown(text);\n      }\n    }}\n  ></input>\n);\n\nconst mapStateToProps = (state) => {\n  return {\n    input: state.history[state.head].input,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onKeyDown: (text) => {\n      dispatch({ type: ADD, text: text });\n      dispatch({ type: CHANGE_TEXT, input: \"\" });\n    },\n    onTextChange: (text) => {\n      dispatch({ type: CHANGE_TEXT, input: text });\n    },\n  };\n};\n\nInputBar = connect(mapStateToProps, mapDispatchToProps)(InputBar);\nexport default InputBar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport store from \"./store\";\nimport { SWITCH_TAB } from \"./actions\";\nimport { connect } from \"react-redux\";\n\nconst TABS = [\"All\", \"Active\", \"Completed\"];\nlet ToolBar = ({ tabs, activeItemCount, onClick }) => {\n  return (\n    <div className=\"tool-bar\">\n      <span className=\"tips\">{activeItemCount} items left</span>\n      {TABS.map((tabName, index) => {\n        return (\n          <div\n            key={tabName}\n            className={tabs === index ? \"filter-btn-selected\" : \"filter-btn\"}\n            onClick={() => {\n              onClick(index);\n            }}\n          >\n            {tabName}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  state = state.history[state.head];\n  const activeItemCount = state.todos.reduce((currentCount, item) => {\n    return !item.done ? ++currentCount : currentCount;\n  }, 0);\n  return {\n    activeItemCount: activeItemCount,\n    tabs: state.tabs,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClick: (i) => dispatch({ type: SWITCH_TAB, tab: i }),\n  };\n};\n\nToolBar = connect(mapStateToProps, mapDispatchToProps)(ToolBar);\n\nexport default ToolBar;\n","import React from \"react\";\nimport {TOGGLE, DELETE } from \"./actions\";\nimport { connect } from \"react-redux\";\n\nlet TodoList = ({ tabs, todos, onToggle, onRemove }) => {\n  return (\n    <div className=\"todo-list\">\n      {todos\n        .filter((item) => {\n          switch (tabs) {\n            case 0:\n              return true;\n            case 1:\n              return !item.done;\n            case 2:\n              return item.done;\n          }\n        })\n        .map((item) => {\n          return (\n            <TodoItem\n              key={item.id}\n              {...item}\n              toggle={onToggle}\n              remove={onRemove}\n            />\n          );\n        })}\n    </div>\n  );\n};\n\nconst TodoItem = ({ done, id, text, toggle, remove }) => (\n  <div draggable=\"true\" className={done ? \"todo-item-done\" : \"todo-item\"}>\n    <input\n      className=\"checkbox\"\n      type=\"checkbox\"\n      onChange={() => {\n        toggle(id);\n      }}\n    ></input>\n    <div className=\"label\">{text}</div>\n    <div\n      className=\"delete\"\n      onClick={() => {\n        remove(id);\n      }}\n    >\n      X\n    </div>\n  </div>\n);\n\nconst mapStateToProps = (state) => {\n  state = state.history[state.head];\n  return {\n    todos: state.todos,\n    tabs: state.tabs,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onToggle: (id) => dispatch({ type: TOGGLE, id: id }),\n    onRemove: (id) => dispatch({ type: DELETE, id: id }),\n  };\n};\n\nTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default TodoList;\n","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport InputBar from \"./todo/Input\"\nimport ToolBar from \"./todo/toolbar\"\nimport TodoList from \"./todo/todoList\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputBar></InputBar>\n      <TodoList></TodoList>\n      <ToolBar></ToolBar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { JUMP } from \"./todo/actions\";\n\nimport { Provider } from \"react-redux\";\n\nimport store from \"./todo/store\";\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n\n\ndocument.onkeydown = (e) => {\n  if (e.metaKey && e.keyCode === 90) {\n    if (store.getState().history.length > 1) {\n      store.dispatch({ type: JUMP });\n    }\n  }\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}